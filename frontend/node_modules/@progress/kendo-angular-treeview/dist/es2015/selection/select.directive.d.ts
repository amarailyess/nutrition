/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { TreeViewComponent } from '../treeview.component';
import { SelectableSettings } from './selectable-settings';
import { Subscription } from 'rxjs';
import { TreeItem } from '../treeitem.interface';
/**
 * A directive which manages the in-memory selection state of the TreeView node
 * ([see example]({% slug selection_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectDirective implements OnDestroy {
    protected treeView: TreeViewComponent;
    /**
     * @hidden
     */
    isSelected: (item: object, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `selectedKeys` collection.
     */
    selectKey: string | ((context: TreeItem) => any);
    /**
     * Defines the current selection mode
     * ([see example]({% slug selection_treeview %}#toc-selection-modes)).
     */
    selection: boolean | SelectableSettings | string;
    /**
     * Defines the collection that will store the selected keys
     * ([see example]({% slug selection_treeview %}#toc-selection-modes)).
     */
    selectedKeys: any[];
    /**
     * Fires when the `selectedKeys` collection was updated.
     */
    selectedKeysChange: EventEmitter<any[]>;
    readonly getAriaMultiselectable: boolean;
    protected subscriptions: Subscription;
    private readonly options;
    private selectActions;
    private _selectedKeys;
    constructor(treeView: TreeViewComponent);
    ngOnDestroy(): void;
    protected itemKey(e: any): any;
    protected select(e: any): void;
    protected selectSingle(node: any): void;
    protected selectMultiple(node: any): void;
    private notify;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectDirective, "[kendoTreeViewSelectable]", never, {
    "isSelected": "isSelected";
    "selectedKeys": "selectedKeys";
    "selectKey": "selectBy";
    "selection": "kendoTreeViewSelectable";
}, {
    "selectedKeysChange": "selectedKeysChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3QuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuLi90cmVldmlldy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0YWJsZVNldHRpbmdzIH0gZnJvbSAnLi9zZWxlY3RhYmxlLXNldHRpbmdzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJlZUl0ZW0gfSBmcm9tICcuLi90cmVlaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBtYW5hZ2VzIHRoZSBpbi1tZW1vcnkgc2VsZWN0aW9uIHN0YXRlIG9mIHRoZSBUcmVlVmlldyBub2RlXG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNlbGVjdGlvbl90cmVldmlldyAlfSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWxlY3REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQ6IChpdGVtOiBvYmplY3QsIGluZGV4OiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgaXRlbSBrZXkgdGhhdCB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYHNlbGVjdGVkS2V5c2AgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBzZWxlY3RLZXk6IHN0cmluZyB8ICgoY29udGV4dDogVHJlZUl0ZW0pID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY3VycmVudCBzZWxlY3Rpb24gbW9kZVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VsZWN0aW9uX3RyZWV2aWV3ICV9I3RvYy1zZWxlY3Rpb24tbW9kZXMpKS5cbiAgICAgKi9cbiAgICBzZWxlY3Rpb246IGJvb2xlYW4gfCBTZWxlY3RhYmxlU2V0dGluZ3MgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiB0aGF0IHdpbGwgc3RvcmUgdGhlIHNlbGVjdGVkIGtleXNcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNlbGVjdGlvbl90cmVldmlldyAlfSN0b2Mtc2VsZWN0aW9uLW1vZGVzKSkuXG4gICAgICovXG4gICAgc2VsZWN0ZWRLZXlzOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBgc2VsZWN0ZWRLZXlzYCBjb2xsZWN0aW9uIHdhcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIHNlbGVjdGVkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcbiAgICByZWFkb25seSBnZXRBcmlhTXVsdGlzZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zO1xuICAgIHByaXZhdGUgc2VsZWN0QWN0aW9ucztcbiAgICBwcml2YXRlIF9zZWxlY3RlZEtleXM7XG4gICAgY29uc3RydWN0b3IodHJlZVZpZXc6IFRyZWVWaWV3Q29tcG9uZW50KTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBpdGVtS2V5KGU6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0KGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNlbGVjdFNpbmdsZShub2RlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZWxlY3RNdWx0aXBsZShub2RlOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgbm90aWZ5O1xufVxuIl19