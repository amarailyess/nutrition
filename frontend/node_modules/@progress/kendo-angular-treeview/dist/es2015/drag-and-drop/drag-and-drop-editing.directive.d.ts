/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy } from '@angular/core';
import { TreeViewComponent } from '../treeview.component';
import { EditService } from './models';
/**
 * A directive which enables the update of the initially provided data array during drag-and-drop.
 *
 * Either use this directive in combination with one of the data binding directives ([`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %})
 * or [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %})) which set their own edit handlers, or provide
 * your own [`editService`]({% slug api_treeview_editservice %}) to this directive. The latter subscribes to and calls the
 * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)
 * handlers when the corresponding events are triggered by the TreeView component.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DragAndDropEditingDirective implements OnDestroy {
    private treeview;
    /**
     * Specifies the handlers called on drag-and-drop [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem)
     * and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events.
     */
    editService: EditService;
    private subscriptions;
    constructor(treeview: TreeViewComponent);
    ngOnDestroy(): void;
    private handleAdd;
    private handleRemove;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragAndDropEditingDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DragAndDropEditingDirective, "[kendoTreeViewDragAndDropEditing]", never, {
    "editService": "editService";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1lZGl0aW5nLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkcmFnLWFuZC1kcm9wLWVkaXRpbmcuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlVmlld0NvbXBvbmVudCB9IGZyb20gJy4uL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFZGl0U2VydmljZSB9IGZyb20gJy4vbW9kZWxzJztcbi8qKlxuICogQSBkaXJlY3RpdmUgd2hpY2ggZW5hYmxlcyB0aGUgdXBkYXRlIG9mIHRoZSBpbml0aWFsbHkgcHJvdmlkZWQgZGF0YSBhcnJheSBkdXJpbmcgZHJhZy1hbmQtZHJvcC5cbiAqXG4gKiBFaXRoZXIgdXNlIHRoaXMgZGlyZWN0aXZlIGluIGNvbWJpbmF0aW9uIHdpdGggb25lIG9mIHRoZSBkYXRhIGJpbmRpbmcgZGlyZWN0aXZlcyAoW2BrZW5kb1RyZWVWaWV3SGllcmFyY2h5QmluZGluZ2BdKHslIHNsdWcgYXBpX3RyZWV2aWV3X2hpZXJhcmNoeWJpbmRpbmdkaXJlY3RpdmUgJX0pXG4gKiBvciBbYGtlbmRvVHJlZVZpZXdGbGF0RGF0YUJpbmRpbmdgXSh7JSBzbHVnIGFwaV90cmVldmlld19mbGF0ZGF0YWJpbmRpbmdkaXJlY3RpdmUgJX0pKSB3aGljaCBzZXQgdGhlaXIgb3duIGVkaXQgaGFuZGxlcnMsIG9yIHByb3ZpZGVcbiAqIHlvdXIgb3duIFtgZWRpdFNlcnZpY2VgXSh7JSBzbHVnIGFwaV90cmVldmlld19lZGl0c2VydmljZSAlfSkgdG8gdGhpcyBkaXJlY3RpdmUuIFRoZSBsYXR0ZXIgc3Vic2NyaWJlcyB0byBhbmQgY2FsbHMgdGhlXG4gKiBbYGFkZEl0ZW1gXSh7JSBzbHVnIGFwaV90cmVldmlld190cmVldmlld2NvbXBvbmVudCAlfSN0b2MtYWRkaXRlbSkgYW5kIFtgcmVtb3ZlSXRlbWBdKHslIHNsdWcgYXBpX3RyZWV2aWV3X3RyZWV2aWV3Y29tcG9uZW50ICV9I3RvYy1yZW1vdmVpdGVtKVxuICogaGFuZGxlcnMgd2hlbiB0aGUgY29ycmVzcG9uZGluZyBldmVudHMgYXJlIHRyaWdnZXJlZCBieSB0aGUgVHJlZVZpZXcgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcmFnQW5kRHJvcEVkaXRpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgdHJlZXZpZXc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBoYW5kbGVycyBjYWxsZWQgb24gZHJhZy1hbmQtZHJvcCBbYGFkZEl0ZW1gXSh7JSBzbHVnIGFwaV90cmVldmlld190cmVldmlld2NvbXBvbmVudCAlfSN0b2MtYWRkaXRlbSlcbiAgICAgKiBhbmQgW2ByZW1vdmVJdGVtYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLXJlbW92ZWl0ZW0pIGV2ZW50cy5cbiAgICAgKi9cbiAgICBlZGl0U2VydmljZTogRWRpdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKHRyZWV2aWV3OiBUcmVlVmlld0NvbXBvbmVudCk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGhhbmRsZUFkZDtcbiAgICBwcml2YXRlIGhhbmRsZVJlbW92ZTtcbn1cbiJdfQ==