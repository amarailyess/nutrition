/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy, OnChanges, NgZone } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { CheckableSettings } from './checkable-settings';
import { CheckedState } from './checkbox/checked-state';
import { Subscription } from 'rxjs';
import { TreeItem } from './treeitem.interface';
/**
 * A directive which manages the in-memory checked state of the TreeView node
 * ([see example]({% slug checkboxes_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class CheckDirective implements OnChanges, OnDestroy {
    protected treeView: TreeViewComponent;
    private zone;
    /**
     * @hidden
     */
    isChecked: (item: object, index: string) => CheckedState;
    /**
     * Defines the item key that will be stored in the `checkedKeys` collection.
     */
    checkKey: string | ((context: TreeItem) => any);
    /**
     * Defines the collection that will store the checked keys
     * ([see example]({% slug checkboxes_treeview %})).
     */
    checkedKeys: any[];
    /**
     * Defines the checkable settings ([see example]({% slug checkboxes_treeview %}#toc-setup)).
     * If no value is provided, the default [`CheckableSettings`]({% slug api_treeview_checkablesettings %}) are applied.
     */
    checkable: boolean | CheckableSettings | string;
    /**
     * Fires when the `checkedKeys` collection was updated.
     */
    checkedKeysChange: EventEmitter<any[]>;
    protected subscriptions: Subscription;
    private readonly options;
    private checkActions;
    private _checkedKeys;
    private clickSubscription;
    constructor(treeView: TreeViewComponent, zone: NgZone);
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    protected isItemChecked(dataItem: any, index: string): CheckedState;
    protected isIndexChecked(index: string): CheckedState;
    protected itemKey(e: any): any;
    protected check(e: any): void;
    protected checkSingle(node: any): void;
    protected checkMultiple(node: any): void;
    protected toggleCheckOnClick(): void;
    private unsubscribeClick;
    private checkNode;
    private checkParents;
    private allChildrenSelected;
    private notify;
    private addChildrenKeys;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CheckDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CheckDirective, "[kendoTreeViewCheckable]", never, {
    "isChecked": "isChecked";
    "checkedKeys": "checkedKeys";
    "checkKey": "checkBy";
    "checkable": "kendoTreeViewCheckable";
}, {
    "checkedKeysChange": "checkedKeysChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNoZWNrLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkNoYW5nZXMsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDaGVja2FibGVTZXR0aW5ncyB9IGZyb20gJy4vY2hlY2thYmxlLXNldHRpbmdzJztcbmltcG9ydCB7IENoZWNrZWRTdGF0ZSB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tlZC1zdGF0ZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyZWVJdGVtIH0gZnJvbSAnLi90cmVlaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBtYW5hZ2VzIHRoZSBpbi1tZW1vcnkgY2hlY2tlZCBzdGF0ZSBvZiB0aGUgVHJlZVZpZXcgbm9kZVxuICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjaGVja2JveGVzX3RyZWV2aWV3ICV9KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENoZWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc0NoZWNrZWQ6IChpdGVtOiBvYmplY3QsIGluZGV4OiBzdHJpbmcpID0+IENoZWNrZWRTdGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpdGVtIGtleSB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgY2hlY2tlZEtleXNgIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgY2hlY2tLZXk6IHN0cmluZyB8ICgoY29udGV4dDogVHJlZUl0ZW0pID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiB0aGF0IHdpbGwgc3RvcmUgdGhlIGNoZWNrZWQga2V5c1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgY2hlY2tib3hlc190cmVldmlldyAlfSkpLlxuICAgICAqL1xuICAgIGNoZWNrZWRLZXlzOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjaGVja2FibGUgc2V0dGluZ3MgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjaGVja2JveGVzX3RyZWV2aWV3ICV9I3RvYy1zZXR1cCkpLlxuICAgICAqIElmIG5vIHZhbHVlIGlzIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBbYENoZWNrYWJsZVNldHRpbmdzYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfY2hlY2thYmxlc2V0dGluZ3MgJX0pIGFyZSBhcHBsaWVkLlxuICAgICAqL1xuICAgIGNoZWNrYWJsZTogYm9vbGVhbiB8IENoZWNrYWJsZVNldHRpbmdzIHwgc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGBjaGVja2VkS2V5c2AgY29sbGVjdGlvbiB3YXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBjaGVja2VkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9ucztcbiAgICBwcml2YXRlIGNoZWNrQWN0aW9ucztcbiAgICBwcml2YXRlIF9jaGVja2VkS2V5cztcbiAgICBwcml2YXRlIGNsaWNrU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHRyZWVWaWV3OiBUcmVlVmlld0NvbXBvbmVudCwgem9uZTogTmdab25lKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGlzSXRlbUNoZWNrZWQoZGF0YUl0ZW06IGFueSwgaW5kZXg6IHN0cmluZyk6IENoZWNrZWRTdGF0ZTtcbiAgICBwcm90ZWN0ZWQgaXNJbmRleENoZWNrZWQoaW5kZXg6IHN0cmluZyk6IENoZWNrZWRTdGF0ZTtcbiAgICBwcm90ZWN0ZWQgaXRlbUtleShlOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGNoZWNrKGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNoZWNrU2luZ2xlKG5vZGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNoZWNrTXVsdGlwbGUobm9kZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdG9nZ2xlQ2hlY2tPbkNsaWNrKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZUNsaWNrO1xuICAgIHByaXZhdGUgY2hlY2tOb2RlO1xuICAgIHByaXZhdGUgY2hlY2tQYXJlbnRzO1xuICAgIHByaXZhdGUgYWxsQ2hpbGRyZW5TZWxlY3RlZDtcbiAgICBwcml2YXRlIG5vdGlmeTtcbiAgICBwcml2YXRlIGFkZENoaWxkcmVuS2V5cztcbn1cbiJdfQ==