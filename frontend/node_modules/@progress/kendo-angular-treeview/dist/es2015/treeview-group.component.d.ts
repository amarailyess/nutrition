/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, OnChanges, OnInit, OnDestroy } from '@angular/core';
import { ExpandStateService } from './expand-state.service';
import { IndexBuilderService } from './index-builder.service';
import { TreeViewLookupService } from './treeview-lookup.service';
import { NavigationService } from './navigation/navigation.service';
import { NodeChildrenService } from './node-children.service';
import { LoadingNotificationService } from './loading-notification.service';
import { CheckedState } from './checkbox/checked-state';
import { Observable } from 'rxjs';
import { DataChangeNotificationService } from './data-change-notification.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TreeViewGroupComponent implements OnChanges, OnInit, OnDestroy {
    protected expandService: ExpandStateService;
    protected loadingService: LoadingNotificationService;
    protected indexBuilder: IndexBuilderService;
    protected treeViewLookupService: TreeViewLookupService;
    protected navigationService: NavigationService;
    protected nodeChildrenService: NodeChildrenService;
    protected dataChangeNotification: DataChangeNotificationService;
    kGroupClass: boolean;
    readonly role: string;
    checkboxes: boolean;
    expandIcons: boolean;
    disabled: boolean;
    touchActions: boolean;
    nodes: (node: any, index: string) => Observable<any[]>;
    textField: string | string[];
    parentDataItem: any;
    parentIndex: string;
    nodeTemplateRef: TemplateRef<any>;
    data: any[];
    private _data;
    private nodesSubscription;
    private dataChangeSubscription;
    constructor(expandService: ExpandStateService, loadingService: LoadingNotificationService, indexBuilder: IndexBuilderService, treeViewLookupService: TreeViewLookupService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, dataChangeNotification: DataChangeNotificationService);
    isChecked: (item: object, index: string) => CheckedState;
    isDisabled: (item: object, index: string) => boolean;
    isExpanded: (item: object, index: string) => boolean;
    isSelected: (item: object, index: string) => boolean;
    children: (item: object) => Observable<any[]>;
    hasChildren: (item: object) => boolean;
    readonly hasTemplate: boolean;
    expandNode(index: string, dataItem: any, expand: boolean): void;
    checkNode(index: string): void;
    nodeIndex(index: number): string;
    nodeText(dataItem: any): any;
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    fetchChildren(node: any, index: string): Observable<any>;
    readonly nextFields: string[];
    private setNodeChildren;
    private mapToTreeItem;
    private emitChildrenLoaded;
    private subscribeToNodesChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeViewGroupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeViewGroupComponent, "[kendoTreeViewGroup]", never, {
    "touchActions": "touchActions";
    "textField": "textField";
    "isChecked": "isChecked";
    "isDisabled": "isDisabled";
    "isExpanded": "isExpanded";
    "isSelected": "isSelected";
    "children": "children";
    "hasChildren": "hasChildren";
    "checkboxes": "checkboxes";
    "expandIcons": "expandIcons";
    "disabled": "disabled";
    "nodes": "nodes";
    "parentDataItem": "parentDataItem";
    "parentIndex": "parentIndex";
    "nodeTemplateRef": "nodeTemplateRef";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXZpZXctZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWV2aWV3LWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgVGVtcGxhdGVSZWYsIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEV4cGFuZFN0YXRlU2VydmljZSB9IGZyb20gJy4vZXhwYW5kLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5kZXhCdWlsZGVyU2VydmljZSB9IGZyb20gJy4vaW5kZXgtYnVpbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFRyZWVWaWV3TG9va3VwU2VydmljZSB9IGZyb20gJy4vdHJlZXZpZXctbG9va3VwLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuL25hdmlnYXRpb24vbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vZGVDaGlsZHJlblNlcnZpY2UgfSBmcm9tICcuL25vZGUtY2hpbGRyZW4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2FkaW5nTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vbG9hZGluZy1ub3RpZmljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDaGVja2VkU3RhdGUgfSBmcm9tICcuL2NoZWNrYm94L2NoZWNrZWQtc3RhdGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0YUNoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2RhdGEtY2hhbmdlLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmVlVmlld0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGV4cGFuZFNlcnZpY2U6IEV4cGFuZFN0YXRlU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgbG9hZGluZ1NlcnZpY2U6IExvYWRpbmdOb3RpZmljYXRpb25TZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBpbmRleEJ1aWxkZXI6IEluZGV4QnVpbGRlclNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHRyZWVWaWV3TG9va3VwU2VydmljZTogVHJlZVZpZXdMb29rdXBTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBuYXZpZ2F0aW9uU2VydmljZTogTmF2aWdhdGlvblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIG5vZGVDaGlsZHJlblNlcnZpY2U6IE5vZGVDaGlsZHJlblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGRhdGFDaGFuZ2VOb3RpZmljYXRpb246IERhdGFDaGFuZ2VOb3RpZmljYXRpb25TZXJ2aWNlO1xuICAgIGtHcm91cENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHJvbGU6IHN0cmluZztcbiAgICBjaGVja2JveGVzOiBib29sZWFuO1xuICAgIGV4cGFuZEljb25zOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHRvdWNoQWN0aW9uczogYm9vbGVhbjtcbiAgICBub2RlczogKG5vZGU6IGFueSwgaW5kZXg6IHN0cmluZykgPT4gT2JzZXJ2YWJsZTxhbnlbXT47XG4gICAgdGV4dEZpZWxkOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBwYXJlbnREYXRhSXRlbTogYW55O1xuICAgIHBhcmVudEluZGV4OiBzdHJpbmc7XG4gICAgbm9kZVRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRhdGE6IGFueVtdO1xuICAgIHByaXZhdGUgX2RhdGE7XG4gICAgcHJpdmF0ZSBub2Rlc1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRhdGFDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZXhwYW5kU2VydmljZTogRXhwYW5kU3RhdGVTZXJ2aWNlLCBsb2FkaW5nU2VydmljZTogTG9hZGluZ05vdGlmaWNhdGlvblNlcnZpY2UsIGluZGV4QnVpbGRlcjogSW5kZXhCdWlsZGVyU2VydmljZSwgdHJlZVZpZXdMb29rdXBTZXJ2aWNlOiBUcmVlVmlld0xvb2t1cFNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSwgbm9kZUNoaWxkcmVuU2VydmljZTogTm9kZUNoaWxkcmVuU2VydmljZSwgZGF0YUNoYW5nZU5vdGlmaWNhdGlvbjogRGF0YUNoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2UpO1xuICAgIGlzQ2hlY2tlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gQ2hlY2tlZFN0YXRlO1xuICAgIGlzRGlzYWJsZWQ6IChpdGVtOiBvYmplY3QsIGluZGV4OiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgaXNFeHBhbmRlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkOiAoaXRlbTogb2JqZWN0LCBpbmRleDogc3RyaW5nKSA9PiBib29sZWFuO1xuICAgIGNoaWxkcmVuOiAoaXRlbTogb2JqZWN0KSA9PiBPYnNlcnZhYmxlPGFueVtdPjtcbiAgICBoYXNDaGlsZHJlbjogKGl0ZW06IG9iamVjdCkgPT4gYm9vbGVhbjtcbiAgICByZWFkb25seSBoYXNUZW1wbGF0ZTogYm9vbGVhbjtcbiAgICBleHBhbmROb2RlKGluZGV4OiBzdHJpbmcsIGRhdGFJdGVtOiBhbnksIGV4cGFuZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2hlY2tOb2RlKGluZGV4OiBzdHJpbmcpOiB2b2lkO1xuICAgIG5vZGVJbmRleChpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuICAgIG5vZGVUZXh0KGRhdGFJdGVtOiBhbnkpOiBhbnk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgZmV0Y2hDaGlsZHJlbihub2RlOiBhbnksIGluZGV4OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcmVhZG9ubHkgbmV4dEZpZWxkczogc3RyaW5nW107XG4gICAgcHJpdmF0ZSBzZXROb2RlQ2hpbGRyZW47XG4gICAgcHJpdmF0ZSBtYXBUb1RyZWVJdGVtO1xuICAgIHByaXZhdGUgZW1pdENoaWxkcmVuTG9hZGVkO1xuICAgIHByaXZhdGUgc3Vic2NyaWJlVG9Ob2Rlc0NoYW5nZTtcbn1cbiJdfQ==