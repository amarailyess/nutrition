/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { BehaviorSubject, Observable } from 'rxjs';
import { CheckedState } from './checkbox/checked-state';
import { DataChangeNotificationService } from './data-change-notification.service';
import { ExpandStateService } from './expand-state.service';
import { NavigationService } from './navigation/navigation.service';
import { NodeChildrenService } from './node-children.service';
import { NodeClickEvent } from './node-click-event.interface';
import { NodeTemplateDirective } from './node-template.directive';
import { SelectionService } from './selection/selection.service';
import { TreeItemLookup } from './treeitem-lookup.interface';
import { TreeItem } from './treeitem.interface';
import { TreeViewLookupService } from './treeview-lookup.service';
import { TreeItemDropEvent, TreeItemAddRemoveArgs, EditService, TreeItemDragEvent, TreeItemDragStartEvent } from './drag-and-drop/models';
/**
 * Represents the [Kendo UI TreeView component for Angular]({% slug overview_treeview %}).
 *
 * @example
 * {% meta height:350 %}
 * ```ts-preview
 * import { Component } from '@angular/core';
 *
 *  _@Component({
 *      selector: 'my-app',
 *      template: `
 *      <kendo-treeview
 *          [nodes]="data"
 *          textField="text"
 *          kendoTreeViewCheckable
 *          kendoTreeViewExpandable
 *          kendoTreeViewSelectable
 *
 *          kendoTreeViewHierarchyBinding
 *          childrenField="items">
 *      </kendo-treeview>
 *  `
 *  })
 *  export class AppComponent {
 *      public data: any[] = [
 *          {
 *              text: "Furniture", items: [
 *                  { text: "Tables & Chairs" },
 *                  { text: "Sofas" },
 *                  { text: "Occasional Furniture" }
 *              ]
 *          },
 *          {
 *              text: "Decor", items: [
 *                  { text: "Bed Linen" },
 *                  { text: "Curtains & Blinds" },
 *                  { text: "Carpets" }
 *              ]
 *          }
 *      ];
 *  }
 * ```
 * {% endmeta %}
 */
import * as ɵngcc0 from '@angular/core';
export declare class TreeViewComponent implements OnChanges, OnInit, OnDestroy {
    element: ElementRef<HTMLElement>;
    protected expandService: ExpandStateService;
    protected navigationService: NavigationService;
    protected nodeChildrenService: NodeChildrenService;
    protected selectionService: SelectionService;
    protected treeViewLookupService: TreeViewLookupService;
    private ngZone;
    private renderer;
    private dataChangeNotification;
    private localization;
    classNames: boolean;
    role: string;
    /** @hidden */
    readonly direction: string;
    /**
     * @hidden
     */
    assetsContainer: ViewContainerRef;
    /**
     * Determines whether the content animation is enabled.
     */
    animate: boolean;
    /** @hidden */
    fetchNodes: () => BehaviorSubject<any[]>;
    /**
     * Fires when the children of the expanded node are loaded.
     */
    childrenLoaded: EventEmitter<{
        children: TreeItem[];
        item: TreeItem;
    }>;
    /**
     * Fires when the user blurs the component.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires when the user focuses the component.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires when the user expands a TreeView node.
     */
    expand: EventEmitter<TreeItem>;
    /**
     * Fires when the user collapses a TreeView node.
     */
    collapse: EventEmitter<TreeItem>;
    /**
     * Fires just before the dragging of the node starts ([see example]({% slug draganddrop_treeview %}#toc-setup)). This event is preventable.
     * If you prevent the event default, no drag hint will be created and the subsequent drag-related events will not be fired.
     */
    nodeDragStart: EventEmitter<TreeItemDragStartEvent>;
    /**
     * Fires when an item is being dragged ([see example]({% slug draganddrop_treeview %}#toc-setup)).
     */
    nodeDrag: EventEmitter<TreeItemDragEvent>;
    /**
     * Fires on the target TreeView when a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
     * This event is preventable. If you prevent the event default (`event.preventDefualt()`) or invalidate its state (`event.setValid(false)`),
     * the `addItem` and `removeItem` events will not be triggered.
     *
     * Both operations cancel the default drop operation, but the indication to the user is different. `event.setValid(false)` indicates that the operation was
     * unsuccessful by animating the drag clue to its original position. `event.preventDefault()` simply removes the clue, as if it has been dropped successfully.
     * As a general rule, use `preventDefault` to manually handle the add and remove operations, and `setValid(false)` to indicate the operation was unsuccessful.
     */
    nodeDrop: EventEmitter<TreeItemDropEvent>;
    /**
     * Fires on the source TreeView after the dragged item has been dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
     */
    nodeDragEnd: EventEmitter<TreeItemDragEvent>;
    /**
     * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
     * Called on the TreeView where the item is dropped.
     */
    addItem: EventEmitter<TreeItemAddRemoveArgs>;
    /**
     * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).
     * Called on the TreeView from where the item is dragged.
     */
    removeItem: EventEmitter<TreeItemAddRemoveArgs>;
    /**
     * Fires when the user selects a TreeView node checkbox
     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).
     */
    checkedChange: EventEmitter<TreeItemLookup>;
    /**
     * Fires when the user selects a TreeView node
     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).
     */
    selectionChange: EventEmitter<TreeItem>;
    /**
     * Fires when the user clicks a TreeView node.
     */
    nodeClick: EventEmitter<NodeClickEvent>;
    /**
     * Fires when the user double clicks a TreeView node.
     */
    nodeDblClick: EventEmitter<NodeClickEvent>;
    /**
     * @hidden
     */
    nodeTemplate: NodeTemplateDirective;
    /**
     * The nodes which will be displayed by the TreeView
     * ([see example]({% slug databinding_treeview %})).
     */
    nodes: any[];
    /**
     * The fields of the data item that provide the text content of the nodes
     * ([see example]({% slug databinding_treeview %})). If the `textField` input is set
     * to an array, each hierarchical level uses the field that corresponds to the same
     * index in the array, or the last item in the array.
     */
    textField: string | string[];
    /**
     * A function which determines if a specific node has child nodes
     * ([see example]({% slug databinding_treeview %})).
     */
    hasChildren: (item: object) => boolean;
    /**
     * A function which determines if a specific node is selected
     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).
     */
    isChecked: (item: object, index: string) => CheckedState;
    /**
     * A function which determines if a specific node is disabled.
     */
    isDisabled: (item: object, index: string) => boolean;
    /**
     * A function which determines if a specific node is expanded.
     */
    isExpanded: (item: object, index: string) => boolean;
    /**
     * A function which determines if a specific node is selected
     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).
     */
    isSelected: (item: object, index: string) => boolean;
    /**
     * Determines whether the TreeView keyboard navigable is enabled.
     */
    navigable: boolean;
    /**
     * A function which provides the child nodes for a given parent node
     * ([see example]({% slug databinding_treeview %})).
     */
    children: (item: object) => Observable<object[]>;
    /**
     * @hidden
     */
    editService: EditService;
    checkboxes: boolean;
    expandIcons: boolean;
    touchActions: boolean;
    isActive: boolean;
    data: BehaviorSubject<any[]>;
    private _animate;
    private _isChecked;
    private _isExpanded;
    private _isSelected;
    private _hasChildren;
    private subscriptions;
    private domSubscriptions;
    constructor(element: ElementRef<HTMLElement>, expandService: ExpandStateService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, selectionService: SelectionService, treeViewLookupService: TreeViewLookupService, ngZone: NgZone, renderer: Renderer2, dataChangeNotification: DataChangeNotificationService, localization: LocalizationService);
    ngOnChanges(_: any): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    /**
     * Blurs the focused TreeView item.
     */
    blur(): void;
    /**
     * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     *
     *  @Component({
     *      selector: 'my-app',
     *      template: `
     *      <button (click)="treeview.focus('1')">Focuses the second node</button>
     *      <kendo-treeview
     *          #treeview
     *          [nodes]="data"
     *          textField="text"
     *      >
     *      </kendo-treeview>
     *  `
     *  })
     *  export class AppComponent {
     *      public data: any[] = [
     *          { text: "Furniture" },
     *          { text: "Decor" }
     *      ];
     *  }
     * ```
     */
    focus(index?: string): void;
    /**
     * Based on the specified index, returns the TreeItemLookup node.
     *
     * @param index - The index of the node.
     * @returns {TreeItemLookup} - The item that was searched (looked up).
     */
    itemLookup(index: string): TreeItemLookup;
    /**
     * @hidden
     */
    isDisabledNode(node: any): boolean;
    /**
     * Triggers the `expand` event for the provided node and displays it's loading indicator.
     */
    expandNode(item: any, index: string): void;
    /**
     * Triggers the `collapse` event for the provided node.
     */
    collapseNode(item: any, index: string): void;
    private attachDomHandlers;
    private focusHandler;
    private blurHandler;
    private clickHandler;
    private keydownHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeViewComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeViewComponent, "kendo-treeview", ["kendoTreeView"], {
    "isDisabled": "isDisabled";
    "navigable": "navigable";
    "children": "children";
    "animate": "animate";
    "nodes": "nodes";
    "hasChildren": "hasChildren";
    "isChecked": "isChecked";
    "isExpanded": "isExpanded";
    "isSelected": "isSelected";
    "textField": "textField";
}, {
    "childrenLoaded": "childrenLoaded";
    "onBlur": "blur";
    "onFocus": "focus";
    "expand": "expand";
    "collapse": "collapse";
    "nodeDragStart": "nodeDragStart";
    "nodeDrag": "nodeDrag";
    "nodeDrop": "nodeDrop";
    "nodeDragEnd": "nodeDragEnd";
    "addItem": "addItem";
    "removeItem": "removeItem";
    "checkedChange": "checkedChange";
    "selectionChange": "selectionChange";
    "nodeClick": "nodeClick";
    "nodeDblClick": "nodeDblClick";
}, ["nodeTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,