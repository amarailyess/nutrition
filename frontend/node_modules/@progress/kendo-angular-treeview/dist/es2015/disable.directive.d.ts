/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, OnChanges } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { TreeItem } from './treeitem.interface';
/**
 * A directive which manages the disabled in-memory state of the TreeView node
 * ([see example]({% slug disabledstate_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DisableDirective implements OnChanges {
    protected treeView: TreeViewComponent;
    protected cdr: ChangeDetectorRef;
    /**
     * @hidden
     */
    isDisabled: (item: object, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `disabledKeys` collection.
     */
    disableKey: string | ((context: TreeItem) => any);
    /**
     * Defines the collection that will store the disabled keys.
     */
    disabledKeys: any[];
    constructor(treeView: TreeViewComponent, cdr: ChangeDetectorRef);
    ngOnChanges(changes?: any): void;
    protected itemKey(e: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DisableDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DisableDirective, "[kendoTreeViewDisable]", never, {
    "disabledKeys": "disabledKeys";
    "isDisabled": "isDisabled";
    "disableKey": "kendoTreeViewDisable";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzYWJsZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZGlzYWJsZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUcmVlSXRlbSB9IGZyb20gJy4vdHJlZWl0ZW0uaW50ZXJmYWNlJztcbi8qKlxuICogQSBkaXJlY3RpdmUgd2hpY2ggbWFuYWdlcyB0aGUgZGlzYWJsZWQgaW4tbWVtb3J5IHN0YXRlIG9mIHRoZSBUcmVlVmlldyBub2RlXG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGRpc2FibGVkc3RhdGVfdHJlZXZpZXcgJX0pKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGlzYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJvdGVjdGVkIHRyZWVWaWV3OiBUcmVlVmlld0NvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNEaXNhYmxlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpdGVtIGtleSB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzYWJsZWRLZXlzYCBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGRpc2FibGVLZXk6IHN0cmluZyB8ICgoY29udGV4dDogVHJlZUl0ZW0pID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiB0aGF0IHdpbGwgc3RvcmUgdGhlIGRpc2FibGVkIGtleXMuXG4gICAgICovXG4gICAgZGlzYWJsZWRLZXlzOiBhbnlbXTtcbiAgICBjb25zdHJ1Y3Rvcih0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM/OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBpdGVtS2V5KGU6IGFueSk6IGFueTtcbn1cbiJdfQ==