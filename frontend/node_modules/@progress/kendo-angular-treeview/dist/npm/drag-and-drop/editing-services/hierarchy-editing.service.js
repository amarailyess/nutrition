/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_common_1 = require("@progress/kendo-common");
var models_1 = require("../models");
var drag_and_drop_utils_1 = require("../drag-and-drop-utils");
/**
 * @hidden
 */
var HierarchyEditingService = /** @class */ (function () {
    function HierarchyEditingService(hierarchyBinding) {
        this.hierarchyBinding = hierarchyBinding;
    }
    HierarchyEditingService.prototype.add = function (_a) {
        var sourceItem = _a.sourceItem, destinationItem = _a.destinationItem, dropPosition = _a.dropPosition, destinationTree = _a.destinationTree;
        var destinationDataItem = destinationItem.item.dataItem;
        // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position
        var sourceDataItem = Object.assign({}, sourceItem.item.dataItem);
        if (dropPosition === models_1.DropPosition.Over) {
            // expand the item that was dropped into
            drag_and_drop_utils_1.expandDropTarget(destinationItem, destinationTree);
            var destinationChildren = kendo_common_1.getter(this.hierarchyBinding.childrenField)(destinationDataItem) || [];
            destinationChildren.push(sourceDataItem);
            kendo_common_1.setter(this.hierarchyBinding.childrenField)(destinationDataItem, destinationChildren);
        }
        else {
            var destinationParentNodes = this.getParentNodes(destinationItem, destinationTree);
            var shiftIndex = dropPosition === models_1.DropPosition.After ? 1 : 0;
            var targetIndex = destinationParentNodes.indexOf(destinationDataItem) + shiftIndex;
            destinationParentNodes.splice(targetIndex, 0, sourceDataItem);
        }
    };
    HierarchyEditingService.prototype.remove = function (_a) {
        var sourceItem = _a.sourceItem, sourceTree = _a.sourceTree;
        var sourceParentNodes = this.getParentNodes(sourceItem, sourceTree);
        var sourceItemIndex = sourceParentNodes.indexOf(sourceItem.item.dataItem);
        sourceParentNodes.splice(sourceItemIndex, 1);
        // emit collapse for the parent node if its last child node was spliced
        drag_and_drop_utils_1.collapseEmptyParent(sourceItem.parent, sourceParentNodes, sourceTree);
    };
    HierarchyEditingService.prototype.getParentNodes = function (node, treeView) {
        return node.parent ?
            kendo_common_1.getter(this.hierarchyBinding.childrenField)(node.parent.item.dataItem) :
            treeView.nodes;
    };
    return HierarchyEditingService;
}());
exports.HierarchyEditingService = HierarchyEditingService;
