var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectorRef, Component, DoCheck, ElementRef, Input, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
let SvgIconComponent = class SvgIconComponent {
    constructor(element, differs, renderer, iconReg, cdr) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.cdr = cdr;
        this.stretch = false;
        /** @deprecated since 9.1.0 */
        this.applyCss = false;
        this.loaded = false;
    }
    // Adapted from ngStyle
    set svgStyle(v) {
        this._svgStyle = v;
        if (!this.differ && v) {
            this.differ = this.differs.find(v).create();
        }
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    ngOnChanges(changeRecord) {
        if (changeRecord.src || changeRecord.name) {
            if (this.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.stretch) {
            this.stylize();
        }
        if (changeRecord.svgClass) {
            this.setClass(changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);
        }
        if (changeRecord.klass) {
            this.setClass(changeRecord.klass.previousValue, changeRecord.klass.currentValue);
        }
        if (changeRecord.viewBox) {
            if (this.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.applyCss) {
            console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');
        }
    }
    ngDoCheck() {
        if (this.svg && this.differ) {
            const changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    }
    init() {
        if (this.name) {
            this.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));
        }
        else if (this.src) {
            this.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));
        }
        else {
            const elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.cdr.markForCheck();
        }
    }
    initSvg(svg) {
        if (!this.loaded) {
            this.setSvg(svg);
            this.resetDiffer();
        }
    }
    destroy() {
        this.svg = undefined;
        this.differ = undefined;
        this.loaded = false;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    }
    resetDiffer() {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    }
    setSvg(svg) {
        if (!this.loaded && svg) {
            this.svg = svg;
            const icon = svg.cloneNode(true);
            const elem = this.element.nativeElement;
            this.copyNgContentAttribute(elem, icon);
            this.renderer.setAttribute(icon, 'class', this.klass);
            if (this.svgClass) {
                this.renderer.setAttribute(icon, 'class', this.svgClass);
            }
            if (this.viewBox) {
                if (this.viewBox === 'auto') {
                    // Attempt to convert height & width to a viewBox.
                    const w = icon.getAttribute('width');
                    const h = icon.getAttribute('height');
                    if (h && w) {
                        const vb = `0 0 ${w} ${h}`;
                        this.renderer.setAttribute(icon, 'viewBox', vb);
                        this.renderer.removeAttribute(icon, 'width');
                        this.renderer.removeAttribute(icon, 'height');
                    }
                }
                else if (this.viewBox !== '') {
                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);
                    this.renderer.removeAttribute(icon, 'width');
                    this.renderer.removeAttribute(icon, 'height');
                }
            }
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.loaded = true;
            this.stylize();
            this.cdr.markForCheck();
        }
    }
    copyNgContentAttribute(hostElem, icon) {
        const attributes = hostElem.attributes;
        const len = attributes.length;
        for (let i = 0; i < len; i += 1) {
            const attribute = attributes.item(i);
            if (attribute.name.startsWith('_ngcontent')) {
                this.setNgContentAttribute(icon, attribute.name);
                break;
            }
        }
    }
    setNgContentAttribute(parent, attributeName) {
        this.renderer.setAttribute(parent, attributeName, '');
        const len = parent.childNodes.length;
        for (let i = 0; i < len; i += 1) {
            const child = parent.childNodes[i];
            if (child instanceof Element) {
                this.setNgContentAttribute(child, attributeName);
            }
        }
    }
    stylize() {
        if (this.svg) {
            const svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    }
    applyChanges(changes) {
        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));
        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));
        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));
    }
    setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value !== null && unit ? `${value}${unit}` : value;
        const svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, value);
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    }
    setClass(previous, current) {
        const svg = this.element.nativeElement.firstChild;
        if (svg) {
            if (previous) {
                this.renderer.removeClass(svg, previous);
            }
            if (current) {
                const klasses = current.split(' ');
                for (const k of klasses) {
                    this.renderer.addClass(svg, k);
                }
            }
        }
    }
};
SvgIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Renderer2 },
    { type: SvgIconRegistryService },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SvgIconComponent.prototype, "src", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SvgIconComponent.prototype, "name", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SvgIconComponent.prototype, "stretch", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SvgIconComponent.prototype, "applyCss", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SvgIconComponent.prototype, "svgClass", void 0);
__decorate([
    Input('class'),
    __metadata("design:type", String)
], SvgIconComponent.prototype, "klass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SvgIconComponent.prototype, "viewBox", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SvgIconComponent.prototype, "svgStyle", null);
SvgIconComponent = __decorate([
    Component({
        selector: 'svg-icon',
        template: '<ng-content></ng-content>'
    }),
    __metadata("design:paramtypes", [ElementRef,
        KeyValueDiffers,
        Renderer2,
        SvgIconRegistryService,
        ChangeDetectorRef])
], SvgIconComponent);
export { SvgIconComponent };
//# sourceMappingURL=data:application/json;base64,