{"version":3,"sources":["ng://angular-svg-icon/lib/svg-loader.ts","ng://angular-svg-icon/lib/svg-icon-registry.service.ts","ng://angular-svg-icon/lib/svg-icon.component.ts","ng://angular-svg-icon/lib/angular-svg-icon.module.ts"],"names":["SvgHttpLoader","http","_this","_super","call","this","__extends","prototype","getSvg","url","get","responseType","HttpClient","__decorate","Injectable","SvgLoader","SERVER_URL","InjectionToken","SvgIconRegistryService","loader","platformId","serverUrl","_document","iconsByUrl","Map","iconsLoadingByUrl","document","addSvg","name","data","has","div","createElement","innerHTML","svg","querySelector","set","loadSvg","match","observableOf","o","pipe","map","tap","catchError","err","console","error","observableThrowError","finalize","delete","share","getSvgByName","unloadSvg","Object","decorators","type","Inject","args","PLATFORM_ID","Optional","DOCUMENT","__decorate$1","__param","String","SVG_ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","SVG_ICON_REGISTRY_PROVIDER","provide","deps","SkipSelf","useFactory","SvgIconComponent","element","differs","renderer","iconReg","cdr","stretch","applyCss","loaded","defineProperty","v","_svgStyle","differ","find","create","ngOnInit","init","ngOnDestroy","destroy","ngOnChanges","changeRecord","src","stylize","svgClass","setClass","previousValue","currentValue","klass","viewBox","warn","ngDoCheck","changes","diff","applyChanges","icnSub","subscribe","initSvg","bind","nativeElement","markForCheck","setSvg","resetDiffer","undefined","unsubscribe","icon","cloneNode","elem","copyNgContentAttribute","setAttribute","w","getAttribute","h","vb","removeAttribute","appendChild","hostElem","attributes","len","length","i","attribute","item","startsWith","setNgContentAttribute","parent","attributeName","childNodes","child","Element","firstChild","forEachRemovedItem","record","setStyle","key","forEachAddedItem","forEachChangedItem","nameAndUnit","value","_a","__read","split","unit","removeStyle","previous","current","removeClass","klasses","klasses_1","__values","klasses_1_1","next","done","k","addClass","ElementRef","KeyValueDiffers","Renderer2","ChangeDetectorRef","Input","__decorate$2","Component","selector","template","AngularSvgIconModule","forRoot","config","ngModule","AngularSvgIconModule_1","providers","useClass","__decorate$3","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport abstract class SvgLoader {\r\n\tabstract getSvg(url: string): Observable<string>;\r\n}\r\n\r\n@Injectable()\r\nexport class SvgHttpLoader extends SvgLoader {\r\n\r\n\tconstructor(private http: HttpClient) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tgetSvg(url: string): Observable<string> {\r\n\t\treturn this.http.get(url, { responseType: 'text' });\r\n\t}\r\n}\r\n","import { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';\n\nimport { Observable, of as observableOf, throwError as observableThrowError } from 'rxjs';\nimport { catchError, finalize, map, share, tap } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { SvgLoader } from './svg-loader';\n\nexport const SERVER_URL = new InjectionToken<string>('SERVER_URL');\n\n@Injectable()\nexport class SvgIconRegistryService {\n\n\tprivate document: Document;\n\tprivate iconsByUrl = new Map<string, SVGElement>();\n\tprivate iconsLoadingByUrl = new Map<string, Observable<SVGElement>>();\n\n\tconstructor(\n\t\tprivate loader: SvgLoader,\n\t\t@Inject(PLATFORM_ID) private platformId: Object,\n\t\t@Optional() @Inject(SERVER_URL) protected serverUrl: string,\n\t\t@Optional() @Inject(DOCUMENT) private _document: any) {\n\t\tthis.document = this._document;\n\t}\n\n\t/** Add a SVG to the registry by passing a name and the SVG. */\n\taddSvg(name: string, data: string) {\n\t\tif (!this.iconsByUrl.has(name)) {\n\t\t\tconst div = this.document.createElement('DIV');\n\t\t\tdiv.innerHTML = data;\n\t\t\tconst svg = div.querySelector('svg') as SVGElement;\n\t\t\tthis.iconsByUrl.set(name, svg);\n\t\t}\n\t}\n\n\t/** Load a SVG to the registry from a URL. */\n\tloadSvg(url: string, name: string = url): Observable<SVGElement> {\n\n\t\t// not sure if there should be a possibility to use name for server usage\n\t\t// so overriding it for now if provided\n\t\t// maybe should separate functionality for url and name use-cases\n\t\tif (this.serverUrl && url.match(/^(http(s)?):/) === null) {\n\t\t\turl = this.serverUrl + url;\n\t\t\tname = url;\n\t\t}\n\n\t\tif (this.iconsByUrl.has(name)) {\n\t\t\treturn observableOf(this.iconsByUrl.get(name));\n\t\t} else if (this.iconsLoadingByUrl.has(name)) {\n\t\t\treturn this.iconsLoadingByUrl.get(name);\n\t\t}\n\t\tconst o = this.loader.getSvg(url).pipe(\n\t\t\tmap(svg => {\n\t\t\t\tconst div = this.document.createElement('DIV');\n\t\t\t\tdiv.innerHTML = svg;\n\t\t\t\treturn div.querySelector('svg') as SVGElement;\n\t\t\t}),\n\t\t\ttap (svg => this.iconsByUrl.set(name, svg) ),\n\t\t\tcatchError(err => {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn observableThrowError(err);\n\t\t\t}),\n\t\t\tfinalize(() => this.iconsLoadingByUrl.delete(name) ),\n\t\t\tshare()\n\t\t) as Observable<SVGElement>;\n\n\t\tthis.iconsLoadingByUrl.set(name, o);\n\t\treturn o;\n\t}\n\n\t/** Get loaded SVG from registry by name. (also works by url because of blended map) */\n\tgetSvgByName(name: string): Observable<SVGElement> {\n\t\tif (this.iconsByUrl.has(name)) {\n\t\t\treturn observableOf(this.iconsByUrl.get(name));\n\t\t} else if (this.iconsLoadingByUrl.has(name)) {\n\t\t\treturn this.iconsLoadingByUrl.get(name);\n\t\t}\n\t\treturn observableThrowError(`No svg with name '${name}' has been loaded`);\n\t}\n\n\t/** Remove a SVG from the registry by URL (or name). */\n\tunloadSvg(url: string) {\n\t\tif (this.iconsByUrl.has(url)) {\n\t\t\tthis.iconsByUrl.delete(url);\n\t\t}\n\t}\n}\n\nexport function SVG_ICON_REGISTRY_PROVIDER_FACTORY(\n\t\tparentRegistry: SvgIconRegistryService,\n\t\tloader: SvgLoader,\n\t\tplatformId: object,\n\t\tserverUrl?: string,\n\t\tdocument?: any) {\n\treturn parentRegistry || new SvgIconRegistryService(loader, platformId,  serverUrl, document);\n}\n\nexport const SVG_ICON_REGISTRY_PROVIDER = {\n\tprovide: SvgIconRegistryService,\n\tdeps: [ [new Optional(), new SkipSelf(), SvgIconRegistryService], SvgLoader, [PLATFORM_ID as InjectionToken<any>],\n\t\t\t[new Optional(), SERVER_URL as InjectionToken<string>], [new Optional(), DOCUMENT as InjectionToken<any>]\n\t],\n\tuseFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\n};\n","import { ChangeDetectorRef, Component, DoCheck, ElementRef, Input,\n\tKeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers,\n\tOnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { SvgIconRegistryService } from './svg-icon-registry.service';\n\n@Component({\n\tselector: 'svg-icon',\n\ttemplate: '<ng-content></ng-content>'\n})\nexport class SvgIconComponent implements OnInit, OnDestroy, OnChanges, DoCheck {\n\t@Input() src: string;\n\t@Input() name: string;\n\t@Input() stretch = false;\n\t/** @deprecated since 9.1.0 */\n\t@Input() applyCss = false;\n\t@Input() svgClass: string;\n\t// tslint:disable-next-line:no-input-rename\n\t@Input('class') klass: string;\n\t@Input() viewBox: string;\n\n\t// Adapted from ngStyle\n\t@Input()\n\tset svgStyle(v: {[key: string]: string }) {\n\t\tthis._svgStyle = v;\n\t\tif (!this.differ && v) {\n\t\t\tthis.differ = this.differs.find(v).create();\n\t\t}\n\t}\n\n\tprivate svg: SVGElement;\n\tprivate icnSub: Subscription;\n\tprivate differ: KeyValueDiffer<string, string|number>;\n\tprivate _svgStyle: {[key: string]: string};\n\tprivate loaded = false;\n\n\tconstructor(\n\t\tprivate element: ElementRef,\n\t\tprivate differs: KeyValueDiffers,\n\t\tprivate renderer: Renderer2,\n\t\tprivate iconReg: SvgIconRegistryService,\n\t\tprivate cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit() {\n\t\tthis.init();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.destroy();\n\t}\n\n\tngOnChanges(changeRecord: SimpleChanges) {\n\t\tif (changeRecord.src || changeRecord.name) {\n\t\t\tif (this.loaded) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\tthis.init();\n\t\t}\n\t\tif (changeRecord.stretch) {\n\t\t\tthis.stylize();\n\t\t}\n\t\tif (changeRecord.svgClass) {\n\t\t\tthis.setClass(changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);\n\t\t}\n\t\tif (changeRecord.klass) {\n\t\t\tthis.setClass(changeRecord.klass.previousValue, changeRecord.klass.currentValue);\n\t\t}\n\t\tif (changeRecord.viewBox) {\n\t\t\tif (this.loaded) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\tthis.init();\n\t\t}\n\t\tif (changeRecord.applyCss) {\n\t\t\tconsole.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');\n\t\t}\n\t}\n\n\tngDoCheck() {\n\t\tif (this.svg && this.differ) {\n\t\t\tconst changes = this.differ.diff(this._svgStyle);\n\t\t\tif (changes) {\n\t\t\t\tthis.applyChanges(changes);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate init() {\n\t\tif (this.name) {\n\t\t\tthis.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));\n\t\t} else if (this.src) {\n\t\t\tthis.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));\n\t\t} else {\n\t\t\tconst elem = this.element.nativeElement;\n\t\t\telem.innerHTML = '';\n\t\t\tthis.cdr.markForCheck();\n\t\t}\n\t}\n\n\tprivate initSvg(svg: SVGElement): void {\n\t\tif (!this.loaded) {\n\t\t\tthis.setSvg(svg);\n\t\t\tthis.resetDiffer();\n\t\t}\n\t}\n\n\tprivate destroy() {\n\t\tthis.svg = undefined;\n\t\tthis.differ = undefined;\n\t\tthis.loaded = false;\n\t\tif (this.icnSub) {\n\t\t\tthis.icnSub.unsubscribe();\n\t\t}\n\t}\n\n\tprivate resetDiffer() {\n\t\tif (this._svgStyle && !this.differ) {\n\t\t\tthis.differ = this.differs.find(this._svgStyle).create();\n\t\t}\n\t}\n\n\tprivate setSvg(svg: SVGElement) {\n\t\tif (!this.loaded && svg) {\n\t\t\tthis.svg = svg;\n\t\t\tconst icon = svg.cloneNode(true) as SVGElement;\n\t\t\tconst elem = this.element.nativeElement;\n\n\t\t\tthis.copyNgContentAttribute(elem, icon);\n\t\t\tthis.renderer.setAttribute(icon, 'class', this.klass);\n\n\t\t\tif (this.svgClass) {\n\t\t\t\tthis.renderer.setAttribute(icon, 'class', this.svgClass);\n\t\t\t}\n\n\t\t\tif (this.viewBox) {\n\t\t\t\tif (this.viewBox === 'auto') {\n\t\t\t\t\t// Attempt to convert height & width to a viewBox.\n\t\t\t\t\tconst w = icon.getAttribute('width');\n\t\t\t\t\tconst h = icon.getAttribute('height');\n\t\t\t\t\tif (h && w) {\n\t\t\t\t\t\tconst vb = `0 0 ${w} ${h}`;\n\t\t\t\t\t\tthis.renderer.setAttribute(icon, 'viewBox', vb);\n\t\t\t\t\t\tthis.renderer.removeAttribute(icon, 'width');\n\t\t\t\t\t\tthis.renderer.removeAttribute(icon, 'height');\n\t\t\t\t\t}\n\t\t\t\t} else if (this.viewBox !== '') {\n\t\t\t\t\tthis.renderer.setAttribute(icon, 'viewBox', this.viewBox);\n\t\t\t\t\tthis.renderer.removeAttribute(icon, 'width');\n\t\t\t\t\tthis.renderer.removeAttribute(icon, 'height');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telem.innerHTML = '';\n\t\t\tthis.renderer.appendChild(elem, icon);\n\t\t\tthis.loaded = true;\n\n\t\t\tthis.stylize();\n\t\t\tthis.cdr.markForCheck();\n\t\t}\n\t}\n\n\tprivate copyNgContentAttribute(hostElem: any, icon: SVGElement) {\n\t\tconst attributes = hostElem.attributes as NamedNodeMap;\n\t\tconst len = attributes.length;\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tconst attribute = attributes.item(i);\n\t\t\tif (attribute.name.startsWith('_ngcontent')) {\n\t\t\t\tthis.setNgContentAttribute(icon, attribute.name);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setNgContentAttribute(parent: Node, attributeName: string) {\n\t\tthis.renderer.setAttribute(parent, attributeName, '');\n\t\tconst len = parent.childNodes.length;\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tconst child = parent.childNodes[i];\n\t\t\tif (child instanceof Element) {\n\t\t\t\tthis.setNgContentAttribute(child, attributeName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate stylize() {\n\t\tif (this.svg) {\n\t\t\tconst svg = this.element.nativeElement.firstChild;\n\n\t\t\tif (this.stretch === true) {\n\t\t\t\tthis.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\n\t\t\t} else if (this.stretch === false) {\n\t\t\t\tthis.renderer.removeAttribute(svg, 'preserveAspectRatio');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate applyChanges(changes: KeyValueChanges<string, string|number>) {\n\t\tchanges.forEachRemovedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, null));\n\t\tchanges.forEachAddedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, record.currentValue));\n\t\tchanges.forEachChangedItem((record: KeyValueChangeRecord<string, string|number>) => this.setStyle(record.key, record.currentValue));\n\t}\n\n\tprivate setStyle(nameAndUnit: string, value: string|number|null|undefined) {\n\t\tconst [name, unit] = nameAndUnit.split('.');\n\t\tvalue = value !== null && unit ? `${value}${unit}` : value;\n\t\tconst svg = this.element.nativeElement.firstChild;\n\n\t\tif (value !== null) {\n\t\t\tthis.renderer.setStyle(svg, name, value as string);\n\t\t} else {\n\t\t\tthis.renderer.removeStyle(svg, name);\n\t\t}\n\t}\n\n\tprivate setClass(previous: string, current: string) {\n\t\tconst svg = this.element.nativeElement.firstChild;\n\t\tif (svg) {\n\t\t\tif (previous) {\n\t\t\t\tthis.renderer.removeClass(svg, previous);\n\t\t\t}\n\t\t\tif (current) {\n\t\t\t\tconst klasses = current.split(' ');\n\t\t\t\tfor (const k of klasses) {\n\t\t\t\t\tthis.renderer.addClass(svg, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SVG_ICON_REGISTRY_PROVIDER } from './svg-icon-registry.service';\nimport { SvgIconComponent } from './svg-icon.component';\nimport { SvgHttpLoader, SvgLoader } from './svg-loader';\n\nexport interface AngularSvgIconConfig {\n\tloader?: Provider;\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t],\n\tdeclarations: [\n\t\tSvgIconComponent\n\t],\n\texports: [ SvgIconComponent ]\n})\nexport class AngularSvgIconModule {\n\n\tstatic forRoot(config: AngularSvgIconConfig = {}): ModuleWithProviders<AngularSvgIconModule> {\n\t\treturn {\n\t\t\tngModule: AngularSvgIconModule,\n\t\t\tproviders: [\n\t\t\t\tSVG_ICON_REGISTRY_PROVIDER,\n\t\t\t\tconfig.loader || { provide: SvgLoader, useClass: SvgHttpLoader }\n\t\t\t]\n\t\t};\n\t}\n}\n"]}